{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPxJHSStT3PZfhqwSYokQ4H",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/FerchosCC/BaseDeDatos2/blob/main/8%C2%B0Trabajo\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 140
        },
        "id": "sCH2BqxdY7RJ",
        "outputId": "1752662c-7978-49c3-d270-1179bac10205"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-e0d951b47c0f>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    def __init__(self, value=Node, izq=Node, der=Node):\u001b[0m\n\u001b[0m                                                       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m incomplete input\n"
          ]
        }
      ],
      "source": [
        "class Nodo:\n",
        "  def __init__(self, value=None, izq=None, der=None):\n",
        "    self.value = value\n",
        "    self.izq = izq\n",
        "    self.der = der\n",
        "  def __str__(self):\n",
        "    return self.value\n",
        "class aBinarios:\n",
        "  def __init__(self):\n",
        "    self.raiz = None\n",
        "  def agregar(self, elemento):\n",
        "    if self.raiz == None:\n",
        "      self.raiz = elemento\n",
        "    else:\n",
        "      aux = self.raiz\n",
        "      padre = None\n",
        "      while aux != None:\n",
        "        padre = aux\n",
        "        if int(elemento.value) >= int(aux.value):\n",
        "          aux = aux.der\n",
        "        else:\n",
        "          aux = aux.izq\n",
        "        if int(elemento.value)"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "OPaL8Kv-hWmi"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}